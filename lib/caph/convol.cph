-- -- =============================================================
-- -- SINGLE-ACTOR CONVOLUTIONS
-- -- Generic name : [c]conv<d><k>
-- -- where
-- --   [c] is for centered convolution (default is shifted)
-- --   <d> is the signal dimension ("1" or "2") 
-- --   <k> is the kernel dimension ("13", "33", ...)
-- -- Examples :
-- --   conv113 implements a (shifted) 1x3 convolution on a 1D signal (<x1,...,xn>)
-- --   cconv233 implements a centered 3x3 convolution on a 2D image (<<x11,..,x1n>,...,<xm1,...,xmn>>)
-- -- =============================================================

#include "dc.cph"  -- the [dc] type

-----------------------------------------------------------------------------------
-- -- CONV11NA : 1xN shifted convolution on signals implemented as a single actor
-- -- CONV11N(k,n,v) :<x_1,x_2,...,x_i,...> = <f x_1,f x_2,...,f x_i,...>
-- -- where
-- --   f(x_i) = v if i<N
-- --   f(x_i) = (x_{i-N+1}*k[0] + ... + x_{i_1}*k[N-2] + ... + x_{i}*k[N-1]) / 2^n 
-----------------------------------------------------------------------------------

actor conv113 (k:int<s,m> array[3], n:int, v:int<s,m>)
   in (i:int<s,m> dc)
  out (o:int<s,m> dc)
var s : {S0,S1,S2,S3} = S0
var z : int<s,m> array[2]
rules
| (s:S0, i:'<) -> (s:S1, o:'<)
| (s:S1, i:'>) -> (s:S0, o:'>)
| (s:S1, i:'p) -> (s:S2, o:'v, z[0]:p)
| (s:S2, i:'p) -> (s:S3, o:'v, z[0]:p, z[1]:z[0])
| (s:S3, i:'p) -> (s:S3, o:'((p*k[2]+z[0]*k[1]+z[1]*k[0])>>n), z[0]:p,  z[1]:z[0])
| (s:S3, i:'>) -> (s:S0, o:'>)
;

actor conv115 (k:int<s,m> array[5], n:int, v:int<s,m>)
   in (i:int<s,m> dc)
  out (o:int<s,m> dc)
var s : {S0,S1,S2,S3,S4,S5} = S0
var z : int<s,m> array[4]
rules
| (s:S0, i:'<) -> (s:S1, o:'<)
| (s:S1, i:'>) -> (s:S0, o:'>)
| (s:S1, i:'p) -> (s:S2, o:'v, z[0]:p)
| (s:S2, i:'p) -> (s:S3, o:'v, z[0]:p, z[1]:z[0])
| (s:S3, i:'p) -> (s:S4, o:'v, z[0]:p, z[1]:z[0], z[2]:z[1])
| (s:S4, i:'p) -> (s:S5, o:'v, z[0]:p, z[1]:z[0], z[2]:z[1], z[3]:z[2])
| (s:S5, i:'p) -> (s:S5, o:'((p*k[4]+z[0]*k[3]+z[1]*k[2]+z[2]*k[1]+z[3]*k[0])>>n), z[0]:p, z[1]:z[0], z[2]:z[1], z[3]:z[2])
| (s:S5, i:'>) -> (s:S0, o:'>)
;

-----------------------------------------------------------------------------------
-- -- CCONV11NA : 1xN centered convolution on signals implemented as a single actor
-- -- !! Only defined for N=2*M+1
-- -- CCONV113A(k,n,v) :<x_1,x_2,...,x_i,...> = <f x_1,f x_2,...,f x_i,...>
-- -- where
-- --   f(x_i) = v if i<M
-- --   f(x_i) = (x_{i-M}*k[0] + ... + x_{i}*k[M] + ... + x_{i+M}*k[N-1]) / 2^n 
-----------------------------------------------------------------------------------

actor cconv113 (k:int<s,m> array[3], n:int, v:int<s,m>)
   in (i:int<s,m> dc)
  out (o:int<s,m> dc)
var s : {S0,S1,S2,S3,S4} = S0
var z : int<s,m> array[2]
rules
| (s:S0, i:'<) -> (s:S1, o:'<)
| (s:S1, i:'>) -> (s:S0, o:'>)
| (s:S1, i:'p) -> (s:S2, z[0]:p)
| (s:S2, i:'p) -> (s:S3, o:'v, z[0]:p, z[1]:z[0])
| (s:S3, i:'p) -> (s:S3, o:'((p*k[2]+z[0]*k[1]+z[1]*k[0])>>n), z[0]:p,  z[1]:z[0])
| (s:S3, i:'>) -> (s:S4, o:'v)
| (s:S4)       -> (s:S0, o:'>)
;

actor cconv115 (k:int<s,m> array[5], n:int, v:int<s,m>)
   in (i:int<s,m> dc)
  out (o:int<s,m> dc)
var s : {S0,S1,S2,S3,S4,S5,S6,S7} = S0
var z : int<s,m> array[4]
rules
| (s:S0, i:'<) -> (s:S1, o:'<)
| (s:S1, i:'>) -> (s:S0, o:'>)
| (s:S1, i:'p) -> (s:S2, z[0]:p)
| (s:S2, i:'p) -> (s:S3, z[0]:p, z[1]:z[0])
| (s:S3, i:'p) -> (s:S4, o:'v, z[0]:p, z[1]:z[0], z[2]:z[1])
| (s:S4, i:'p) -> (s:S5, o:'v, z[0]:p, z[1]:z[0], z[2]:z[1], z[3]:z[2])
| (s:S5, i:'p) -> (s:S5, o:'((p*k[4]+z[0]*k[3]+z[1]*k[2]+z[2]*k[1]+z[3]*k[0])>>n), z[0]:p, z[1]:z[0], z[2]:z[1], z[3]:z[2])
| (s:S5, i:'>) -> (s:S6, o:'v)
| (s:S6)       -> (s:S7, o:'v)
| (s:S7)       -> (s:S0, o:'>)
;

-- -------------------------------------------------------------------------------
-- CONV21<n>a : shifted 1xn convolutions on 2D images implemented as single actors
-- Generalisation of CONV11<n>a to 2D signals 
-- -------------------------------------------------------------------------------

actor conv213 (k:int<s,m> array[3], n:int, v:int<s,m>)
   in (i:int<s,m> dc)
  out (o:int<s,m> dc)
var s : {S00,S0,S1,S2,S3} = S00
var z : int<s,m> array[2]
rules
| (s:S00, i:'<) -> ( s:S0, o:'<)
| ( s:S0, i:'>) -> (s:S00, o:'>)
| ( s:S0, i:'<) -> ( s:S1, o:'<)
| ( s:S1, i:'>) -> ( s:S0, o:'>)
| ( s:S1, i:'p) -> ( s:S2, o:'v, z[0]:p)
| ( s:S2, i:'p) -> ( s:S3, o:'v, z[0]:p, z[1]:z[0])
| ( s:S3, i:'p) -> ( s:S3, o:'((p*k[2]+z[0]*k[1]+z[1]*k[0])>>n), z[0]:p,  z[1]:z[0])
| ( s:S3, i:'>) -> ( s:S0, o:'>)
;

actor conv215 (k:int<s,m> array[5], n:int, v:int<s,m>)
   in (i:int<s,m> dc)
  out (o:int<s,m> dc)
var s : {S00,S0,S1,S2,S3,S4,S5} = S00
var z : int<s,m> array[4]
rules
| (s:S00, i:'<) -> ( s:S0, o:'<)
| (s:S0, i:'>) -> (s:S00, o:'>)
| (s:S0, i:'<) -> (s:S1, o:'<)
| (s:S1, i:'>) -> (s:S0, o:'>)
| (s:S1, i:'p) -> (s:S2, o:'v, z[0]:p)
| (s:S2, i:'p) -> (s:S3, o:'v, z[0]:p, z[1]:z[0])
| (s:S3, i:'p) -> (s:S4, o:'v, z[0]:p, z[1]:z[0], z[2]:z[1])
| (s:S4, i:'p) -> (s:S5, o:'v, z[0]:p, z[1]:z[0], z[2]:z[1], z[3]:z[2])
| (s:S5, i:'p) -> (s:S5, o:'((p*k[4]+z[0]*k[3]+z[1]*k[2]+z[2]*k[1]+z[3]*k[0])>>n), z[0]:p, z[1]:z[0], z[2]:z[1], z[3]:z[2])
| (s:S5, i:'>) -> (s:S0, o:'>)
;

-- ----------------------------------------------------------------------------------------------------
-- CONV233 : shifted 3x3 convolution on 2D images implemented as a
-- single actor (with external fifos for line delays)
-- CONV233(k,n,v):<<x_11,...,x_1n>,...<x_m1,...x_mn>> = <<f(x_11),...,f(x_1n)>,...<f(x_m1),...f(x_mn)>>
-- where
--   f(x_{i,j}) = (k_{0,0}*x_{i-2,j-2} + k_{0,1}*x_{i_2,j-1} + k_{0,2}*x_{i-2,j}
--               + k_{1,0}*x_{i-1,j-2} + k_{1,1}*x_{i_1,j-1} + k_{1,2}*x_{i-1,j}
--               + k_{2,0}*x_{i,j-2}   + k_{2,1}*x_{i,j-1}   + k_{2,2}*x_{i,j}) >> n
--  (with x_{-2,j}=x{-1,j}=x{i,-2}=x{i,-1}=v)
-- where : 
--  +-----+-----+-----+   +-------------+-------------+-----------+
--  | k00 | k01 | k02 |   | x_{i-2,j-2} | x_{i-2,j-1} | x_{i-2,j} |
--  +-----+-----+-----+   +-------------+-------------+-----------+
--  | k10 | k11 | k12 | * | x_{i-1,j-2} | x_{i-1,j-1} | x_{i-1,j} |
--  +-----+-----+-----+   +-------------+-------------+-----------+
--  | k20 | k21 | k22 |   |  x_{i,j-2}  |  x_{i,j-1}  |  x_{i,j}  | <- current pixel
--  +-----+-----+-----+   +-------------+-------------+-----------+
-- ----------------------------------------------------------------------------------------------------

actor conv233a (k:int<s,m> array[3][3], n:int, v:int<s,m>)
  in (i:int<s,m> dc,    -- input
      z0:int<s,m>,      -- previous line  (fed back through an external link)
      z1:int<s,m>)      -- pre-previous line  (fed back through an external link)
  out (o:int<s,m> dc,   -- output
       oz0:int<s,m>,    -- previous line  (fed back through an external link)
       oz1:int<s,m>)    -- previous line  (fed back through an external link)
var s : {S0,S1,S2,S3,S4,S5,S6,S7,S8} = S0
var x : int<s,m> array[3][2] 
--  +-----+-----+-----+   +---------+---------+-------+
--  | k00 | k01 | k02 |   | x[2][1] | x[2][0] | x6=p2 |
--  +-----+-----+-----+   +---------+---------+-------+
--  | k10 | k11 | k12 | * | x[1][1] | x[1][0] | x3=p1 |
--  +-----+-----+-----+   +---------+---------+-------+
--  | k20 | k21 | k22 |   | x[0][1] | x[0][0] | x0=p0 |
--  +-----+-----+-----+   +---------+---------+-------+
rules
| (s:S0, i:'<)                -> (s:S1, o:'<)                   -- Start of Image
| (s:S1, i:'>)                -> (s:S0, o:'>)                   -- End of image
| (s:S1, i:'<)                -> (s:S2, o:'<)                   -- Start of first line
| (s:S2, i:'p0)               -> (s:S2, o:'v, oz0:p0)           -- Read first line and store in fifo z0
| (s:S2, i:'>)                -> (s:S3, o:'>)                   -- End of first line
| (s:S3, i:'<)                -> (s:S4, o:'<)                   -- Start of second line
| (s:S4, i:'p0, z0:p1)        -> (s:S4, o:'v, oz1:p1, oz0:p0)   -- Read second line, store in fifo z0 while moving z0 to z1
| (s:S4, i:'>)                -> (s:S5, o:'>)                   -- End of second line
| (s:S5, i:'>)                -> (s:S0, o:'>)                   -- End of image
| (s:S5, i:'<)                -> (s:S6, o:'<)                   -- Start of third (and subsequent) line(s)
                                                                -- The previous and pre-previous lines are avail from z0 and z1 resp.
| (s:S6, i:'p0, z0:p1, z1:p2) -> (s:S7, o:'v,                   -- First pixel of line
                                  x[2][0]:p2, x[1][0]:p1, x[0][0]:p0,
                                  oz1:p1, oz0:p0)
| (s:S7, i:'p0, z0:p1, z1:p2) -> (s:S8, o:'v,                   -- Second pixel
                                  x[2][1]:x[2][0], x[2][0]:p2, x[1][1]:x[1][0], x[1][0]:p1, x[0][1]:x[0][0], x[0][0]:p0,
                                  oz1:p1, oz0:p0)
| (s:S8, i:'p0, z0:p1, z1:p2) -> (s:S8,                         -- Third and subsequent pixels of line
                                  o:'((k[0][0]*x[2][1] + k[0][1]*x[2][0] + k[0][2]*p2
                                    + k[1][0]*x[1][1] + k[1][1]*x[1][0] + k[1][2]*p1
                                    + k[2][0]*x[0][1] + k[2][1]*x[0][0] +  k[2][2]*p0)>>n),
                                  x[2][1]:x[2][0], x[2][0]:p2, x[1][1]:x[1][0], x[1][0]:p1, x[0][1]:x[0][0], x[0][0]:p0,
                                  oz1:p1, oz0:p0)
| (s:S8, i:'>)               -> (s:S5, o:'>)
;

net conv233 (kernel,norm,pad) i = let rec (o,z0,z1) = conv233a (kernel,norm,pad) (i,z0,z1) in o;

actor conv255a (k:int<s,m> array[5][5], n:int, v:int<s,m>)
  in (i:int<s,m> dc,    -- input
      z0:int<s,m>,      -- previous lines  (fed back through an external link)
      z1:int<s,m>,
      z2:int<s,m>,
      z3:int<s,m>)
  out (o:int<s,m> dc,   -- output
       oz0:int<s,m>,    -- previous lines  (fed back through an external link)
       oz1:int<s,m>,
       oz2:int<s,m>,
       oz3:int<s,m>)
var s : {S0,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14} = S0
var x : int<s,m> array[5][4] 
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k00 | k01 | k02 | k03 | k04 |   | x[4][3] | x[4][2] | x[4][1] | x[4][0] |    p4   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k10 | k11 | k12 | k13 | k14 |   | x[3][3] | x[3][2] | x[3][1] | x[3][0] |    p3   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k20 | k21 | k22 | k23 | k24 | * | x[2][3] | x[2][2] | x[2][1] | x[2][0] |    p2   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k30 | k31 | k32 | k33 | k34 |   | x[1][3] | x[1][2] | x[1][1] | x[1][0] |    p1   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k40 | k41 | k42 | k43 | k44 |   | x[0][3] | x[0][2] | x[0][1] | x[0][0] |    p0   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
rules
| (s:S0, i:'<)                -> (s:S1, o:'<)                   -- Start of Image
| (s:S1, i:'>)                -> (s:S0, o:'>)                   -- End of image

| (s:S1, i:'<)                -> (s:S2, o:'<)                   -- Start of first line
| (s:S2, i:'p0)               -> (s:S2, o:'v, oz0:p0)           -- Read first line and store in fifo z0
| (s:S2, i:'>)                -> (s:S3, o:'>)                   -- End of first line

| (s:S3, i:'<)                -> (s:S4, o:'<)                   -- Start of second line
| (s:S4, i:'p0, z0:p1)        -> (s:S4, o:'v, oz1:p1, oz0:p0)   -- Read second line, store in fifo z0 while moving z0 to z1
| (s:S4, i:'>)                -> (s:S5, o:'>)                   -- End of second line

| (s:S5, i:'<)                -> (s:S6, o:'<)                   -- Start of third line
| (s:S6, i:'p0, z0:p1, z1:p2) -> (s:S6, o:'v, oz2:p2, oz1:p1, oz0:p0)
                                                                -- Read third line, store in fifo z0 while moving z0 to z1 and z1 to z2
| (s:S6, i:'>)                -> (s:S7, o:'>)                   -- End of third line

| (s:S7, i:'<)                -> (s:S8, o:'<)                   -- Start of 4th line
| (s:S8, i:'p0, z0:p1, z1:p2, z2:p3) -> (s:S8, o:'v, oz3: p3, oz2:p2, oz1:p1, oz0:p0) 
                                                                -- Read 4th line, store in fifo z0 while moving z0 to z1, z1 to z2 and z2 to z3
| (s:S8, i:'>)                -> (s:S9, o:'>)                   -- End of 4th line

| (s:S9, i:'>)                -> (s:S0, o:'>)                   -- End of image
| (s:S9, i:'<)                -> (s:S10, o:'<)                  -- Start of 5th (and subsequent) line(s)
                                                                -- The previous lines are avail from z0, z1, z2 and z3 resp.

| (s:S10, i:'p0, z0:p1, z1:p2, z2:p3, z3:p4) -> (s:S11, o:'v,   -- First pixel of line
                                  x[4][0]:p4,
                                  x[3][0]:p3,
                                  x[2][0]:p2,
                                  x[1][0]:p1,
                                  x[0][0]:p0,
                                  oz3:p3, oz2:p2, oz1:p1, oz0:p0)

| (s:S11, i:'p0, z0:p1, z1:p2, z2:p3, z3:p4) -> (s:S12, o:'v,    -- Second pixel
                                  x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:p3, oz2:p2, oz1:p1, oz0:p0)

| (s:S12, i:'p0, z0:p1, z1:p2, z2:p3, z3:p4) -> (s:S13, o:'v,    -- Third pixel
                                  x[4][2]:x[4][1], x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][2]:x[3][1], x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][2]:x[2][1], x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][2]:x[1][1], x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][2]:x[0][1], x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:p3, oz2:p2, oz1:p1, oz0:p0)

| (s:S13, i:'p0, z0:p1, z1:p2, z2:p3, z3:p4) -> (s:S14, o:'v,    -- 4th pixel
                                  x[4][3]:x[4][2], x[4][2]:x[4][1], x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][3]:x[3][2], x[3][2]:x[3][1], x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][3]:x[2][2], x[2][2]:x[2][1], x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][3]:x[1][2], x[1][2]:x[1][1], x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][3]:x[0][2], x[0][2]:x[0][1], x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:p3, oz2:p2, oz1:p1, oz0:p0)

| (s:S14, i:'p0, z0:p1, z1:p2, z2:p3, z3:p4) -> (s:S14,                         -- 5th and subsequent pixels of line
                                  o:'((k[0][0]*x[4][3] + k[0][1]*x[4][2] + k[0][2]*x[4][1] + k[0][3]*x[4][0] + k[0][4]*p4
                                     + k[1][0]*x[3][3] + k[1][1]*x[3][2] + k[1][2]*x[3][1] + k[1][3]*x[3][0] + k[1][4]*p3
                                     + k[2][0]*x[2][3] + k[2][1]*x[2][2] + k[2][2]*x[2][1] + k[2][3]*x[2][0] + k[2][4]*p2
                                     + k[3][0]*x[1][3] + k[3][1]*x[1][2] + k[3][2]*x[1][1] + k[3][3]*x[1][0] + k[3][4]*p1
                                     + k[4][0]*x[0][3] + k[4][1]*x[0][2] + k[4][2]*x[0][1] + k[4][3]*x[0][0] + k[4][4]*p0)>>n),
                                  x[4][3]:x[4][2], x[4][2]:x[4][1], x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][3]:x[3][2], x[3][2]:x[3][1], x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][3]:x[2][2], x[2][2]:x[2][1], x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][3]:x[1][2], x[1][2]:x[1][1], x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][3]:x[0][2], x[0][2]:x[0][1], x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:p3, oz2:p2, oz1:p1, oz0:p0)
| (s:S14, i:'>)               -> (s:S9, o:'>)
;

net conv255 (kernel,norm,pad) i = let rec (o,z0,z1,z2,z3) = conv255a (kernel,norm,pad) (i,z0,z1,z2,z3) in o;

-- ----------------------------------------------------------------------
-- CCONV233 : centered 3x3 convolution on 2D images implemented as a single
--  actor (with external fifos for line delays)
-- CCONV233(k,n,v):<<x_11,...,x_1n>,...<x_m1,...x_mn>> = <<f(x_11),...,f(x_1n)>,...<f(x_m1),...f(x_mn)>>
-- where
--   f(x_{i,j}) = (k_{0,0}*x_{i-1,j-1} + k_{0,1}*x_{i_1,j} + k_{0,2}*x_{i-1,j+1}
--               + k_{1,0}*x_{i,j-1} + k_{1,1}*x_{i,j} + k_{1,2}*x_{i,j+1}
--               + k_{2,0}*x_{i+1,j-1} + k_{2,1}*x_{i+1,j} + k_{2,2}*x_{i+1,j+1}) >> n
--  (with x_{0,j}=x{m+1,j}=x{i,0}=x{i,n+1}=v)
-- where : 
--  +-----+-----+-----+   +--------------+------------+-------------+
--  | k00 | k01 | k02 |   | x_{i-1,j-1}  | x_{i-1,j}  | x_{i-1,j+1} |
--  +-----+-----+-----+   +--------------+-------------+------------+
--  | k10 | k11 | k12 | * | x_{i,j-1}    | x_{i,j} <--|-x_{i,j+1}---|-- current pixel 
--  +-----+-----+-----+   +--------------+-------------+------------+
--  | k20 | k21 | k22 |   | x_{i+1,j-1}  | x_{i+1,j}  | x{i+1,j+1}  |
--  +-----+-----+-----+   +--------------+------------+-------------+
-- Warning : this actor requires horizontal and vertical blanking (>3 pixels between rows,
--           >line_width between images)
-- ----------------------------------------------------------------------------------------------------

actor cconv233a (k:int<s,m> array[3][3], n:int, v:int<s,m>)
  in (i:int<s,m> dc,       -- input
      z0:int<s,m> dc,      -- previous line  (fed back through an external link)
      z1:int<s,m> dc)      -- pre-previous line  (fed back through an external link)
  out (o:int<s,m> dc,      -- output
       oz0:int<s,m> dc,    -- previous line  (fed back through an external link)
       oz1:int<s,m> dc)    -- previous line  (fed back through an external link)
var s : {SoF,SoL1,L1,SoL2,L2,SoL3,P1,P2,P3,P4,D1,D2,EoF} = SoF
var x : int<s,m> array[3][2] 
--  +-----+-----+-----+   +---------+---------+-------+
--  | k00 | k01 | k02 |   | x[2][1] | x[2][0] | x6=p2 |
--  +-----+-----+-----+   +---------+---------+-------+
--  | k10 | k11 | k12 | * | x[1][1] | x[1][0] | x3=p1 |
--  +-----+-----+-----+   +---------+---------+-------+
--  | k20 | k21 | k22 |   | x[0][1] | x[0][0] | x0=p0 |
--  +-----+-----+-----+   +---------+---------+-------+
rules
| (s:SoF , i:'<)                 -> (s:SoL1, o:'<)
| (s:SoL1, i:'>)                 -> (s:SoF, o:'>)
| (s:SoL1, i:'<)                 -> (s:L1, oz0:'<)
| (s:L1, i:'p)                   -> (s:L1, oz0:'p)
| (s:L1, i:'>)                   -> (s:SoL2, oz0:'>)
| (s:SoL2, i:'<, z0:'<)          -> (s:L2, o:'<, oz1:'<, oz0:'<)
| (s:L2, i:'p0, z0:'p1)          -> (s:L2, o:'v, oz1:'p1, oz0:'p0)
| (s:L2, i:'>, z0:'>)            -> (s:SoL3, o:'>, oz1:'>, oz0:'>)
| (s:SoL3, i:'<, z0:'<, z1:'<)   -> (s:P1, o:'<, oz1:'<, oz0:'<)
| (s:SoL3, i:'>)                 -> (s:D1, oz1:'>, oz0:'>)
| (s:P1, i:'p0, z0:'p1, z1:'p2)  -> (s:P2, x[2][0]:p2, x[1][0]:p1, x[0][0]:p0, oz1:'p1, oz0:'p0)
| (s:P2, i:'p0, z0:'p1, z1:'p2)  -> (s:P3,
                                         o:'v,
                                         x[2][1]:x[2][0], x[2][0]:p2, x[1][1]:x[1][0], x[1][0]:p1, x[0][1]:x[0][0], x[0][0]:p0,
                                         oz1:'p1, oz0:'p0)
| (s:P3, i:'p0, z0:'p1, z1:'p2)  -> (s:P3,
                                         o:'((k[0][0]*x[2][1] + k[0][1]*x[2][0] + k[0][2]*p2
                                            + k[1][0]*x[1][1] + k[1][1]*x[1][0] + k[1][2]*p1
                                            + k[2][0]*x[0][1] + k[2][1]*x[0][0] +  k[2][2]*p0)>>n),
                                         x[2][1]:x[2][0], x[2][0]:p2, x[1][1]:x[1][0], x[1][0]:p1, x[0][1]:x[0][0], x[0][0]:p0,
                                         oz1:'p1, oz0:'p0)
| (s:P3, i:'>, z0:'>, z1:'>)     -> (s:P4, o:'v, oz1:'>, oz0:'>)
| (s:P4 )                        -> (s:SoL3, o:'>)         -- this requires horizontal blanking
| (s:D1, z0:'<, z1:'< )          -> (s:D2, o:'<)         -- this requires vertical blanking (at least > image width)
| (s:D2, z0:'x, z1:'y)           -> (s:D2, o:'v)
| (s:D2, z0:'>, z1:'>)           -> (s:EoF, o:'>)
| (s:EoF, z0:'>, z1:'>)          -> (s:SoF, o:'>)
;

net cconv233 (kernel,norm,pad) i = let rec (o,z0,z1) = cconv233a (kernel,norm,pad) (i,z0,z1) in o;

-- ----------------------------------------------------------------------
-- CCONV255 : centered 5x5 convolution on 2D images implemented as a single
--  actor (with external fifos for line delays)
-- CCONV255(k,n,v):<<x_11,...,x_1n>,...<x_m1,...x_mn>> = <<f(x_11),...,f(x_1n)>,...<f(x_m1),...f(x_mn)>>
-- where
--   f(x_{i,j}) = (k_{0,0}*x_{i-2,j-2} + k_{0,1}*x_{i-2,j-1} + k_{0,2}*x_{i-2,j} + k_{0,3}*x_{i-2,j+1} + k_{0,4}*x_{i-2,j+2}
--               + k_{1,0}*x_{i-1,j-2} + k_{1,1}*x_{i-1,j-1} + k_{1,2}*x_{i-1,j} + k_{1,3}*x_{i-1,j+1} + k_{1,4}*x_{i-1,j+2}
--               + k_{2,0}*x_{i,j-2} + k_{2,1}*x_{i,j-1} + k_{2,2}*x_{i,j} + k_{2,3}*x_{i,j+1} + k_{2,4}*x_{i,j+2}
--               + k_{3,0}*x_{i+1,j-2} + k_{3,1}*x_{i+1,j-1} + k_{3,2}*x_{i+1,j} + k_{3,3}*x_{i+1,j+1} + k_{3,4}*x_{i+1,j+2}
--               + k_{4,0}*x_{i+2,j-2} + k_{4,1}*x_{i+2,j-1} + k_{4,2}*x_{i+2,j} + k_{4,3}*x_{i+2,j+1} + k_{4,4}*x_{i+2,j+2})>>n
--  (with x_{0,j}=x_{-1,j}=x_{m+1,j}=x_{m+2,j}=x_{i,0}=x_{i,-1}=x_{i,n+1}=x_{i,n+2}=v)
--  +-----+-----+-----+-----+-----+   +------------+------------+----------+------------+------------+
--  | k00 | k01 | k02 | k03 | k04 |   | x{i-2,j-2} | x{i-2,j-1} | x{i-2,j} | x{i-2,j+1} | x{i-2,j+2} |
--  +-----+-----+-----+-----+-----+   +------------+------------+----------+------------+------------+
--  | k10 | k11 | k12 | k13 | k14 |   | x{i-1,j-2} | x{i-1,j-1} | x{i-1,j} | x{i-1,j+1} | x{i-1,j+2} | 
--  +-----+-----+-----+-----+-----+   +------------+------------+----------+------------+------------+
--  | k20 | k21 | k22 | k23 | k24 | * |  x{i,j-2}  |  x{i,j-1}  |  x{i,j}  |  x{i,j+1}  |  x{i,j+2}  | 
--  +-----+-----+-----+-----+-----+   +------------+------------+----------+------------+------------+
--  | k30 | k31 | k32 | k33 | k34 |   | x{i+1,j-2} | x{i+1,j-1} | x{i+1,j} | x{i+1,j+1} | x{i+1,j+2} | 
--  +-----+-----+-----+-----+-----+   +------------+------------+----------+------------+------------+
--  | k40 | k41 | k42 | k43 | k44 |   | x{i+2,j-2} | x{i+2,j-1} | x{i+2,j} | x{i+2,j+1} | x{i+2,j+2} | 
--  +-----+-----+-----+-----+-----+   +------------+------------+----------+------------+------------+
-- Warning : this actor requires horizontal and vertical blanking (>3 pixels between rows,
--           >line_width between images)
-- ----------------------------------------------------------------------------------------------------

actor cconv255a (k:int<s,m> array[5][5], n:int, v:int<s,m>)
  in (i:int<s,m> dc,       -- input
      z0:int<s,m> dc,      -- previous lines  (fed back through an external link)
      z1:int<s,m> dc,
      z2:int<s,m> dc,
      z3:int<s,m> dc)
  out (o:int<s,m> dc,      -- output
       oz0:int<s,m> dc,    -- previous lines  (fed back through an external link)
       oz1:int<s,m> dc,
       oz2:int<s,m> dc,
       oz3:int<s,m> dc)
var s : {SoF,SoL1,L1,SoL2,L2,SoL3,L3,SoL4,L4,SoL5,P1,P2,P3,P4,P5,E1,E2,F11,F12,F21,F22,EoF} = SoF
var x : int<s,m> array[5][4] 
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k00 | k01 | k02 | k03 | k04 |   | x[4][3] | x[4][2] | x[4][1] | x[4][0] |    p4   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k10 | k11 | k12 | k13 | k14 |   | x[3][3] | x[3][2] | x[3][1] | x[3][0] |    p3   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k20 | k21 | k22 | k23 | k24 | * | x[2][3] | x[2][2] | x[2][1] | x[2][0] |    p2   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k30 | k31 | k32 | k33 | k34 |   | x[1][3] | x[1][2] | x[1][1] | x[1][0] |    p1   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
--  | k40 | k41 | k42 | k43 | k44 |   | x[0][3] | x[0][2] | x[0][1] | x[0][0] |    p0   |
--  +-----+-----+-----+-----+-----+   +---------+---------+---------+---------+---------+
rules
| (s:SoF, i:'<)                -> (s:SoL1, o:'<)                  -- Start of Image
| (s:SoL1, i:'>)               -> (s:SoF, o:'>)                   -- End of image

| (s:SoL1, i:'<)              -> (s:L1, oz0:'<)                   -- Start of first line
| (s:L1, i:'p0)               -> (s:L1, oz0:'p0)                  -- Read first line and store in fifo z0
| (s:L1, i:'>)                -> (s:SoL2, oz0:'>)                 -- End of first line

| (s:SoL2, i:'<, z0:'<)       -> (s:L2, oz1:'<, oz0:'<)           -- Start of second line
| (s:L2, i:'p0, z0:'p1)       -> (s:L2, oz1:'p1, oz0:'p0)         -- Read second line, store in fifo z0 while moving z0 to z1
| (s:L2, i:'>, z0:'>)         -> (s:SoL3, oz1:'>, oz0:'>)         -- End of second line

| (s:SoL3, i:'<, z0:'<, z1:'<)  -> (s:L3, o:'<, oz2:'<, oz1:'<, oz0:'<)     -- Start of third line
| (s:L3, i:'p0, z0:'p1, z1:'p2) -> (s:L3, o:'v, oz2:'p2, oz1:'p1, oz0:'p0)
                                                                -- Read third line, store in fifo z0 while moving z0 to z1 and z1 to z2
| (s:L3, i:'>, z0:'>, z1:'>)    -> (s:SoL4, o:'>, oz2:'>, oz1:'>, oz0:'>)   -- End of third line

| (s:SoL4, i:'<, z0:'<, z1:'<, z2:'<)     -> (s:L4, o:'<, oz3:'<, oz2:'<, oz1:'<, oz0:'<)  -- Start of 4th line
| (s:L4, i:'p0, z0:'p1, z1:'p2, z2:'p3)   -> (s:L4, o:'v, oz3:'p3, oz2:'p2, oz1:'p1, oz0:'p0) 
                                                                -- Read 4th line, store in fifo z0 while moving z0 to z1, z1 to z2 and z2 to z3
| (s:L4, i:'>, z0:'>, z1:'>, z2:'>)       -> (s:SoL5, o:'>, oz3:'>, oz2:'>, oz1:'>, oz0:'>)   -- End of 4th line

| (s:SoL5, i:'<, z0:'<, z1:'<, z2:'<, z3:'<)   -> (s:P1, o:'<, oz3:'<, oz2:'<, oz1:'<, oz0:'<)
| (s:SoL5, i:'>)                               -> (s:F11)

| (s:P1, i:'p0, z0:'p1, z1:'p2, z2:'p3, z3:'p4) -> (s:P2,            -- First pixel of line
                                  x[4][0]:p4,
                                  x[3][0]:p3,
                                  x[2][0]:p2,
                                  x[1][0]:p1,
                                  x[0][0]:p0,
                                  oz3:'p3, oz2:'p2, oz1:'p1, oz0:'p0)

| (s:P2, i:'p0, z0:'p1, z1:'p2, z2:'p3, z3:'p4) -> (s:P3,           -- Second pixel
                                  x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:'p3, oz2:'p2, oz1:'p1, oz0:'p0)

| (s:P3, i:'p0, z0:'p1, z1:'p2, z2:'p3, z3:'p4) -> (s:P4, o:'v,     -- Third pixel
                                  x[4][2]:x[4][1], x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][2]:x[3][1], x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][2]:x[2][1], x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][2]:x[1][1], x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][2]:x[0][1], x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:'p3, oz2:'p2, oz1:'p1, oz0:'p0)

| (s:P4, i:'p0, z0:'p1, z1:'p2, z2:'p3, z3:'p4) -> (s:P5, o:'v,    -- 4th pixel
                                  x[4][3]:x[4][2], x[4][2]:x[4][1], x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][3]:x[3][2], x[3][2]:x[3][1], x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][3]:x[2][2], x[2][2]:x[2][1], x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][3]:x[1][2], x[1][2]:x[1][1], x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][3]:x[0][2], x[0][2]:x[0][1], x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:'p3, oz2:'p2, oz1:'p1, oz0:'p0)

| (s:P5, i:'p0, z0:'p1, z1:'p2, z2:'p3, z3:'p4) -> (s:P5,                         -- 5th and subsequent pixels of line
                                  o:'((k[0][0]*x[4][3] + k[0][1]*x[4][2] + k[0][2]*x[4][1] + k[0][3]*x[4][0] + k[0][4]*p4
                                     + k[1][0]*x[3][3] + k[1][1]*x[3][2] + k[1][2]*x[3][1] + k[1][3]*x[3][0] + k[1][4]*p3
                                     + k[2][0]*x[2][3] + k[2][1]*x[2][2] + k[2][2]*x[2][1] + k[2][3]*x[2][0] + k[2][4]*p2
                                     + k[3][0]*x[1][3] + k[3][1]*x[1][2] + k[3][2]*x[1][1] + k[3][3]*x[1][0] + k[3][4]*p1
                                     + k[4][0]*x[0][3] + k[4][1]*x[0][2] + k[4][2]*x[0][1] + k[4][3]*x[0][0] + k[4][4]*p0)>>n),
                                  x[4][3]:x[4][2], x[4][2]:x[4][1], x[4][1]:x[4][0], x[4][0]:p4,
                                  x[3][3]:x[3][2], x[3][2]:x[3][1], x[3][1]:x[3][0], x[3][0]:p3,
                                  x[2][3]:x[2][2], x[2][2]:x[2][1], x[2][1]:x[2][0], x[2][0]:p2,
                                  x[1][3]:x[1][2], x[1][2]:x[1][1], x[1][1]:x[1][0], x[1][0]:p1,
                                  x[0][3]:x[0][2], x[0][2]:x[0][1], x[0][1]:x[0][0], x[0][0]:p0,
                                  oz3:'p3, oz2:'p2, oz1:'p1, oz0:'p0)

| (s:P5, i:'>, z0:'>, z1:'>, z2:'>, z3:'>) -> (s:E1, o:'v, oz3:'>, oz2:'>, oz1:'>, oz0:'>)

| (s:E1)                                   -> (s:E2, o:'v)           -- Filling end of line (two padding pixels) 
| (s:E2)                                   -> (s:SoL5, o:'>)    

| (s:F11, z0:'<, z1:'<, z2:'<, z3:'< )     -> (s:F12, o:'<, oz0:'<)          -- Filling end of frame (two padding lines)
| (s:F12, z0:'p1, z1:'p2, z2:'p3, z3:'p4)  -> (s:F12, o:'v, oz0:'p1)
| (s:F12, z0:'>, z1:'>, z2:'>, z3:'>)      -> (s:F21, o:'>, oz0:'>)
| (s:F21, z0:'<)                           -> (s:F22, o:'<)           
| (s:F22, z0:'p0)                          -> (s:F22, o:'v)
| (s:F22, z0:'>)                           -> (s:EoF, o:'>)

| (s:EoF)      -> (s:SoF, o:'>)         -- End of frame
;

net cconv255 (kernel,norm,pad) i = let rec (o,z0,z1,z2,z3) = cconv255a (kernel,norm,pad) (i,z0,z1,z2,z3) in o;
