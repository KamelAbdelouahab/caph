=encoding utf8

=head1 NAME

txt2bin - convert CAPH text input files to text-encoded binary format 

=head1 SYNOPSIS

txt2bin [-eventf] [-dc] [-abbrev] [-hblank n] [-vblank n] [-out file] format bitwidth file(s)

=head1 DESCRIPTION

This program can be used to convert CAPH text input files to text-encoded binary format to be used
by the testbenches generated by the VHDL backend of the CAPH compiler

=head1 ARGUMENTS

=over

=item format

type of data tokens to be read in the input file: C<uint>, C<sint>, C<float> or C<bool>

=item bitwidth

size, in bits, of the data words to write in the output file

=item file(s)

name of the input file(s); if several files are specified, the results of converting each of them will be concatenated in the output file  

=back

=head1 OPTIONS

=over

=item -eventf

process I<event files>, describing timed sequence of events for input I<ports> (default is to process I<stream files>, describing untimed sequence of tokens for input I<streams>)

=item -dc

encode tokens having type C<t dc> with the following convention: C<11xxxxxx> for C<Data v>, C<01xxxxxx> for C<SoS> and C<10xxxxxx> for C<SoS>

=item -abbrev

use abbreviated syntax for tokens having type C<t dc> in the input file (C<v> for C<Data v>, C<<> for C<SoS> and C<>> for C<EoS>)        

=item -hblank n

insert I<n> "no data" extra tokens (C<00xxxxxx>) in the output file after each C<EoS> token (end of line)

=item -vblank n

insert I<n> "no data" extra tokens (C<00xxxxxx>) in the output file after each pair of successive C<EoS> token (end of frame)

=item -out file

write result in file F<file> (default is to write on F<stdout>)

=back

=head1 EXAMPLES

The following command will convert the file F<sample.txt>, containing the representation of an
stream of type C<signed<16>>, writting the result in file F<sample.bin> :

 txt2bin -out sample.bin sint 16 sample.txt

The following command will convert a sequence of file F<im1.txt>, ..., F<im8.txt>, each
containing the representation of an image encoded with the type C<unsigned<8> dc>, inserting 4 blank tokens at the end of each line and 16 blank tokens at the end of each image, and writting the result in file F<imgs.bin> :

 txt2bin -dc -abbrev -out imgs.bin -hblank 4 -vblank 16 uint 8 im[1-8].txt
 
=head1 EXIT STATUS

The program returns a zero exist status if it succeeds and a non zero value in case of failure. In
the latter case, an error message is printed to stderr.

=head1 CAVEAT

The program can only convert files containing tokens with a scalar type (signed or unsigned int, float32 or boolean) or with type C<t dc>, where C<t> is a scalar type. Arrays and user-defined variant types are not supported.

When converting tokens of type C<t dc>, the size in bits of individual words in the output file is I<n+2>, where I<n> is the specified bitwidth. The two extra bits are used to encode the tag.

Using the special value C<00xxxxx> to handle blanking is a hack. It can also increase significantly the size of the output file.

When using the I<float> format, the only accepted I<bitwidth> is 32. Moreover, the program may not
work correctly in this case on platforms on which the size of C<unsigned int> and
C<float> (as reported by the C operator C<sizeof> is not 4 bytes (32 bits).

The program cannot direcly read image file in PGM format. For this, use the I<pgm2bin> program.

=head1 AUTHOR

Jocelyn SE<eacute>rot (jocelyn.serot@univ-bpclermont.fr)

=head1 SEE ALSO

L<pgm2txt(1)>, L<txt2pgm(1)>, L<bin2txt(1)>, L<pgm2bin(1)>
