            Installing CAPH from sources on a Unix machine
            ----------------------------------------------

PREREQUISITES

To compile the CAPH compiler, you'll need OCaml >= 4.03 (available from http://ocaml.org). The Camlp4 extension 
of OCaml must also be installed.

To compile the C auxilliary library (in lib/c) and the auxilliary tools (in tools), a C compiler is
required.  The GNU C compiler (gcc), which is the standard compiler under Linux, MacOS X, and many
other systems, is recommended.

Some of the Makefiles of the distribution requires GNU make.  If your system's default make is not
  GNU make, you need to define the GNUMAKE environment variable to the name of GNU make, typically
  with this command:

    export GNUMAKE=gnumake

OPTIONAL PREREQUISITES

To view the dataflow graphs generated by the compiler (with the [-dot] option), you will need the
the DOT graph visualization system (available from http://www.graphviz.org).

To compile and run the code generated by the SystemC backend, you will need a working SystemC
framework. The code generated bu the SystemC backend uses a library which is located in
lib/systemc. This library is pure template and does not need to be compiled.

To simulate/synthetize the code generated by the VHDL backend uses, you will have to import it
under your favorite VHDL IDE. The generated code uses a library which is located in
lib/vhdl. Integration of this library depends on your VHDL IDE. The default Makefile located in
lib/vhdl builds a library using the GHDL (ghdl.free.fr) compiler. 

To compile the CAPH graphical front-end, you will need Qt vers >= 5.8.

INSTALLATION INSTRUCTIONS

1- Configure the system. From the top directory, do:

        ./configure

The "configure" script accepts the following options:

-platform <name>                (default: unix)
        Target platform (unix or windows)

-target TARGET                  (default: byte)
        Type of executable to build for the compiler (byte or opt)

-prefix <dir>                         (default: /usr/local/caph)
        Directory where the CAPH repository will be installed.

-bindir <dir>                         (default: <prefix>/bin)
        Binaries will be installed in <bindir>.

-libdir <dir>                         (default: <prefix>/lib)
        Libraries will be installed in <libdir>/{c,etc,caph,systemc,vhdl}.

-mandir <dir>                         (default: <prefix/man>)
        Man pages will be installed in <mandir>.


-binfix <dir>                         (default: <prefix>/local/bin)
        Binaries will be installed in <dir>/caph/bin.
        Libraries will be installed in <dir>/caph/lib/{c,etc,caph,systemc,vhdl}.
        Man pages will be installed in <dir>/caph/man.


-cc <C compiler and options>          (default: gcc)
        C compiler to use for building the auxilliary libraries
        and tools

-cpp <C pre-processor and options>    (default: /lip/cpp)
        Command to invoke the C pre-processor

-make <make command and options>      (default: make)
        Command to invoke make

-ar <C archiver>                      (default: ar)
        C archiver to use for building the auxilliary libraries

-debug                                (default: no)
        Build the compiler in debug mode (not for the casual user)

-ocp                                  (default: no)
       use ocamlc-ocp,.... instead of ocamlc, ... to build the compiler

-vhdl_support                         (default: no)
       build the VHDL auxilliary library 

-vhdl_comp <VHDL compiler and options> (default: ghdl)
      VHDL compiler to use to build the auxilliary VHDL library and to compule the 
      code generated by the VHDL backend

-vhdl_fp_support                       (default: no)
      activate float support in the VHDL auxilliary library 

-vhdl_fp_lib <path>
      location of the float library for VHDL

-dotviewer                             (default: none)
      name of the command to invoke for viewing .dot files 

-pgmviewer                             (default: none)
      name of the command to invoke for viewing .pgm files

-help
        Print a summary of configure options

Examples:

  Standard installation in /opt/caph/{bin,lib,etc,man,} instead of /usr/local:
    ./configure -prefix /opt/caph -dotviewer /usr/local/bin/graphviz/dotty /usr/local/bin/toyviewer

  Installation in /usr/local with VHDL support (but no floating point library for VHDL)
    ./configure -vhdl_support

  Installation in /usr/local with VHDL support and the floating point library in /opt/vhdl/fp-altera
    ./configure -vhdl_support -vhdl_fp_support -vhdl_fp_lib /opt/vhdl/fp-altera

If something goes wrong during the automatic configuration, or if the
generated files cause errors later on, then look at generated file "./config" in the top directory.

2- From the top directory, do:

        make all

This builds the compiler, the auxilliary C library and tools and, if requested (using the [-vhdl_support] of
the configure script), the VHDL support library (note: the SystemC library is pure template and does have to 
be compiled).
 
3- Build the CAPH GUI (this is optional and requires that Qt >= 5.8 is installed on your machine) :

   Launch QtCreator and open the project "caphy.pro" located in the caphy subdirectory of the distribution
   Set the build repository to ./caphy_build (click on the "Project" icon in the left toolbar)
   Invoke "Compile all" (from the menu or using the toolbar)   
   

4- Edit the file

       ./lib/etc/Makefile.core 

   to reflect your platform-specific options concerning third-parties programs (SystemC installation,...)

5- Install the CAPH system. From the top directory, do

       make install

(you may have to become super-user depending on the location of the install directory selected
during configuration)

This will 

- install the following commands in the caph/bin directory 

        caphc            the CAPH compiler
        caph             the CAPH  GUI
        caphmake         the Makefile generator
        bin2txt          utility programs to run simulations
        txt2bin
        txt2pgm
        pgm2txt
        pgm2bin
        bin2pgm
        mkdcimg
        mkconv           utility program to generate convolution actors

- install the C, CAPH, etc, SystemC and (if requested) VHDL auxilliary libraries in the caph/lib directory

- intall the man pages in the caph/man directory

- intall the documentation in the caph/doc directory

6. Run the examples

If your CAPH install directory is <caphdir> (as set with the --prefix option with configure), add a variable 
pointing to this directory in your environment. Example (with Bash) :

    CAPH=/usr/local/caph; export CAPH

Add <caphdir>/bin to your PATH env variable. Example (with Bash) :

    PATH=/usr/local/caph/bin:$PATH; export PATH

Go to an example directory in the distribution  (ex: ./examples/working/basic/scale)

Invoke the [caphmake] utility to build the toplevel Makefile

    caphmake

Build the target specific Makefiles

   make makefiles

You can now invoke all the target specific rules to generate and view graphical representations, run simulation with
the interpreter, generate code for the SystemC and VHDL backend, etc..

In particular 

i) For generating and a graphical representation of the process network, type

     make dot

   For viewing this representation (assuming that you have provided the name of the correct program 
   in $(CAPH)/lib/etc/Makefile.core), type

     make dot.show

ii) For simulating the program using the reference interpreter, type

     make sim.run

   For viewing the results generated by the simulator, type

     make sim.show

iii) For generating the SystemC code, compiling and running it, type 

     make systemc.run

   For viewing the generated results, type

     make systemc.show

iv) For generating the VHDL code, type 

     make vhdl.code

   For compiling and running this code, type 

     make vhdl.run

   For viewing the generated results, type

     make vhdl.show

6- Optionally, build the graphical front-end

The source files and project files (.pro) are located in the directory [caphy] of the distribution. The easiest way
to build the application is to launch QtCreator, request a [qmake] and a [compile all]. The application bundle will 
be written in directory [../caphy_build].

COMMON PROBLEMS:

* The Makefiles use the "include" directive, which is not supported by
all versions of make. Use GNU make if this is a problem.

* The Makefiles assume that make executes commands by calling /bin/sh. They
won't work if /bin/csh is called instead. You may have to unset the SHELL
environment variable, or set it to /bin/sh.
